const fetch = require("node-fetch");
var whileF = 0;
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
class Monitor {
    constructor(prod) {
       this.db=prod;
    }

    async start() {
        console.log("BAŞARILI: linkler tek tek ziyaret etmeye başlanıyor!") 
        
        
           while(whileF===0){
            this.links = this.db.fetch("uptimeLinks");
            var currentdate = new Date(); 
            var datetime = currentdate.getDate() + "/"
                            + (currentdate.getMonth()+1)  + "/" 
                            + currentdate.getFullYear() + " @ "  
                            + currentdate.getHours() + ":"  
                            + currentdate.getMinutes() + ":" 
                            + currentdate.getSeconds();


                let min = 2*60*1000
                let addition = Math.ceil(Math.random() * 3*60*1000);
                let time = min+addition;
                var lastElement = null;
                this.links.forEach(async(element) => {
                    if(lastElement!=element){
                        fetch(element)
                        lastElement = element;
                    }
                });  
                console.log(`[${datetime}] : `+this.links.length+" adet bağlantı ziyaret edildi");
                console.log(`[${datetime}] : Sonraki ziyaret ${Math.ceil(time/1000)} saniye sonra.`);

                await sleep(time);
            }
        /*
        setInterval(() => {
            if(whileF === 1) return;
           
        }, this.time);*/
    }

    end() {
        console.log("BAŞARILI: link ziyaret edimi sonlandırıldı!")
        whileF += 1;
    }

}

module.exports = Monitor;